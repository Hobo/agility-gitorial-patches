intro

From: Bryan Larsen <bryan@larsen.st>

The Agility Tutorial - A simple story manager
{: .document-title}

Contents
{: .contents-heading}

- contents
{:toc}

# Introduction

In this tutorial we'll be creating a simple "Agile Development" application -- _Agility_. The application tracks projects which consist of a number of user stories. Stories have a status (e.g. accepted, under development...) as well as a number of associated tasks. Tasks can be assigned to users, and each user can see a heads-up of all the tasks they've been assigned to on their home page.

This is a bit of an in-at-the-deep-end tutorial -- we build the app the way you would assuming you had already got the hang of the way Hobo works. In the later stages new concepts start coming thick and fast. The goal here is to show you what's possible, and give you a flavour of Hobo-style application development, rather than to provide detailed background on how everything works. Don't worry about it, it's fun! If you'd rather take things a bit slower, you might prefer the [POD tutorial](http://hobocentral.net/pod-tutorial).


# Getting Started


## Introduction to Hobo

Hobo is a bunch of extensions to Ruby on Rails that are designed to make developing any kind of web application a good deal faster and more fun. This tutorial is designed to show off Hobo's ability to get quite sophisticated applications up and running extremely quickly.

While Hobo is very well suited to this kind of throw-it-together-in-an-afternoon application, it is equally useful for longer term projects, where the end result needs to be very meticulously crafted to the needs of its users. Hopefully the tutorial will give you an idea of how to take your Hobo/Rails application much further.

For more info on Hobo please see [hobocentral.net](http://hobocentral.net)

## This is a gitorial

This is a 'gitorial', a tutorial made with git.  However, we highly
recommend that you treat this as you would any other tutorial.  The
more that you put into the tutorial, the more you will get out of it.

Code changes in this gitorial are displayed in a modified *patch*
format.  When you see one of these, they indicate how you should
modify the code in your version of this project.   Lines that have a
"+" in the left hand column and are coloured green indicate lines that
you should add to your project.   Lines to remove have a "-" in the
left hand column and are coloured red.

On the other hand, if you see something that looks like code but has a
"$" in the left hand column -- those aren't patches!  Those are
commands that you can type into your command terminal.

If you are a little bit lazy and have `git` installed, you can use git
to follow along.   People who aren't lazy can skip the rest of this
section and jump the the [next chapter](#blank-rails-template)

### Using patch

The patches we have displayed are simplified for on-screen viewing.
However, there is a link beside each entry (TBD FIXME) you can click
on to download the raw patch.  To apply the raw patch from your
project's root directory:

    patch -p1 < patch-file

### Using git checkout

If you use git to follow the gitorial, you will not be able to make
any modifications to your project -- they will be overwritten every
time you switch to the next step.   Using git is a great way to look
at a small section of the gitorial.

Check out the [application from
github](http://github.com/bryanlarsen/agility-gitorial/tree/master):

    $ git clone git://github.com/bryanlarsen/agility-gitorial.git
    $ cd agility-gitorial
    $ git submodule update --init

Then you can switch to any point in the tutorial:

    $ git checkout -b gitorial-001

To keep the gitorial clean, updates to the gitorial **rewrite
history**.  That means that you cannot `git pull`.  If you wish to
update to a later version, you must `git clone` the repository again
and move any changes you have made from your old clone to the new one.


### Using stacked git

We used [Stacked Git](http://www.procode.org/stgit/) to develop this
gitorial.  It's a great tool to follow this gitorial.

Instructions for using stacked git with this gitorial are in the
README in our [source
repository](http://github.com/bryanlarsen/agility-gitorial-patches/tree/master).

### Using our test version of agility

There is a [version of
agility](http://github.com/tablatom/agility/tree/master) that is not
in gitorial format.  This tree is mainly used for integration testing
Hobo.
---

 README |   23 +++++++++++++++++++++++
 1 files changed, 23 insertions(+), 0 deletions(-)


diff --git a/README b/README
index e69de29..4adc211 100644
--- a/README
+++ b/README
@@ -0,0 +1,23 @@
+# Agility
+
+This is the source code to accompany the [Agility gitorial for
+Hobo](http://cookbook.hobocentral.net/gitorials/agility).
+
+Agility is a simple "Agile Development" application – Agility. The
+application tracks projects which consist of a number of user
+stories. Stories have a status (e.g. accepted, under development…) as
+well as a number of associated tasks. Tasks can be assigned to users,
+and each user can see a heads-up of all the tasks they’ve been
+assigned to on their home page.
+
+To keep the gitorial clean, updates to the gitorial **rewrite
+history**.  That means that you cannot `git pull`.  If you wish to
+update to a later version, you must `git clone` the repository again
+and move any changes you have made from your old clone to the new one.
+
+The "real" history is kept in our [source
+repository](http://github.com/bryanlarsen/agility-gitorial-patches/tree/master).
+
+There is a [version of
+agility](http://github.com/tablatom/agility/tree/master) that is not
+in gitorial format.  This tree is mainly used for integration testing Hobo.
