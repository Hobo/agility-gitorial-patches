create-simple-integration-test

From: Bryan Larsen <bryan@larsen.st>

The next step is to create an integration test using Capybara.  There
are two parts to this: the magic boilerplate and the meat of the test.

For the magic boiler plate, a quick Google gives us [this
post](http://blag.ahax.de/post/1581758817/using-capybara-with-plain-rails-integration-tests-and).

For the meat of the test, we refer to the [capybara
documentation](https://github.com/jnicklas/capybara/blob/master/README.rdoc).
Look at the section titled `The DSL`, which contains links to
appropriate sections in the rdoc.

This test is actually part of the Hobo system test suite.

SHOW_PATCH

When your test is written, run it with

    $ rake test:integration
---
 app/models/user.rb                      |    2 
 test/integration/create_account_test.rb |  152 +++++++++++++++++++++++++++++++
 2 files changed, 153 insertions(+), 1 deletions(-)
 create mode 100644 test/integration/create_account_test.rb

diff --git a/app/models/user.rb b/app/models/user.rb
index 4d847bc..6a59beb 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -20,7 +20,7 @@ class User < ActiveRecord::Base
   # This gives admin rights and an :active state to the first sign-up.
   # Just remove it if you don't want that
   before_create do |user|
-    if !Rails.env.test? && user.class.count == 0
+    if user.class.count == 0
       user.administrator = true
       user.state = "active"
     end
diff --git a/test/integration/create_account_test.rb b/test/integration/create_account_test.rb
new file mode 100644
index 0000000..62d1a62
--- /dev/null
+++ b/test/integration/create_account_test.rb
@@ -0,0 +1,152 @@
+# -*- coding: utf-8 -*-
+require 'test_helper'
+require 'capybara'
+require 'capybara/dsl'
+require 'database_cleaner'
+
+Capybara.app = Agility::Application
+Capybara.default_driver = :rack_test
+DatabaseCleaner.strategy = :truncation
+
+class CreateAccountTest < ActionDispatch::IntegrationTest
+  include Capybara::DSL
+  self.use_transactional_fixtures = false
+
+  setup do
+    DatabaseCleaner.start
+  end
+
+  teardown do
+    #DatabaseCleaner.clean
+  end
+
+  test "create account" do
+    Capybara.current_driver = :selenium
+    visit root_path
+
+    # create administrator
+    fill_in "user_name", :with => "Admin User"
+    fill_in "user_email_address", :with => "admin@example.com"
+    fill_in "user_password", :with => "test123"
+    fill_in "user_password_confirmation", :with => "test123"
+    click_button "Register Administrator"
+    assert has_content?("You are now the site administrator")
+    click_link "Log out"
+
+    # signup
+    click_link "Signup"
+    fill_in "user_name", :with => "Test User"
+    fill_in "user_email_address", :with => "test@example.com"
+    fill_in "user_password", :with => "test123"
+    fill_in "user_password_confirmation", :with => "test123"
+    click_button "Signup"
+    assert has_content?("Thanks for signing up!")
+    find("#activation-link").click
+    click_button "Activate"
+
+    # log in
+    click_link "Login"
+    fill_in "login", :with => "test@example.com"
+    fill_in "password", :with => "test123"
+    click_button "Login"
+    assert has_content?("You have logged in.")
+
+    # create First Project/Story/Task
+    click_link "New Project"
+    fill_in "project_name", :with => "First Project"
+    click_button "Create Project"
+    assert has_content?("The Project was created successfully")
+
+    click_link "New Story"
+    fill_in "story_title", :with => "First Story"
+    fill_in "story[body]", :with => "First Story"
+    click_button "Create Story"
+    assert has_content?("The Story was created successfully")
+
+    fill_in "task_description", :with => "First Task"
+    find("div.task-users select").select("Test User")
+    click_button "Add"
+    assert has_content?("The Task was created successfully")
+
+    # create Second User
+    click_link "Log out"
+    click_link "Signup"
+    fill_in "user_name", :with => "Second User"
+    fill_in "user_email_address", :with => "second@example.com"
+    fill_in "user_password", :with => "second2"
+    fill_in "user_password_confirmation", :with => "second2"
+    click_button "Signup"
+    assert has_content?("Thanks for signing up!")
+    click_link "activation-link"
+    click_button "Activate"
+    click_link "Login"
+    fill_in "login", :with => "second@example.com"
+    fill_in "password", :with => "second2"
+    click_button "Login"
+    assert has_content?("You have logged in.")
+    assert has_content?("New Project")
+
+    #click_link "New Project"
+    #fill_in "project_name", :with => "Second Project"
+    #click_button "Create Project"
+
+    # switch to Test User
+    click_link "Log out"
+    click_link "Login"
+    fill_in "login", :with => "test@example.com"
+    fill_in "password", :with => "test123"
+    click_button "Login"
+    assert has_content?("Logged in as Test User")
+
+    # add Second User to First Task
+    click_link "First Project"
+    click_link "First Story"
+    click_link "Edit Task"
+    find("div.task-users select").select("Second User")
+    click_button "Save Task"
+    assert has_content?("Assigned users: Test User, Second User")
+
+    # log in as Administrator
+    click_link "Log out"
+    click_link "Login"
+    fill_in "login", :with => "admin@example.com"
+    fill_in "password", :with => "test123"
+    click_button "Login"
+    assert has_content?("Logged in as Admin User")
+
+    # define statuses
+    visit "/story_statuses"
+    click_link "New Story status"
+    fill_in "story_status_name", :with => "discussion"
+    click_button "Create Story status"
+    assert has_content?("There is one Story status")
+    click_link "New Story status"
+    fill_in "story_status_name", :with => "documentation"
+    click_button "Create Story status"
+    assert has_content?("There are 2 Story statuses")
+
+    # log in as Test User
+    click_link "Log out"
+    click_link "Login"
+    fill_in "login", :with => "test@example.com"
+    fill_in "password", :with => "test123"
+    click_button "Login"
+    assert has_content?("Logged in as Test User")
+
+    # add status to First Story
+    click_link "Home"
+    click_link "First Project"
+    click_link "First Story"
+    find("select.story_status").select("discussion")
+    #wait_for_visible "css=div.ajax-progress"
+    #wait_for_not_visible "css=div.ajax-progress"
+
+    click_link "Â« Back to Project First Project"
+    assert_equal "discussion", find("span.story-status-name").text
+
+    # check filtering
+    select "documentation", :from => "status"
+    assert has_content?("No stories match your criteria")
+
+  end
+end
